<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
					<!-- resultType 이전에 dto를 new 해서 list 에 add 해주는 과정을 알아서 처리해준다 -->
	<select id="getList" resultType="memberDto">
		select num,name,addr  		<!-- 작성한 칼럼명과 Dto의 필드명이 일치해야 Dto에 넣을수있다 -->
		from member
		order by num asc
	</select>
	
	<select id="getList2" resultType="java.util.HashMap"><!-- 셀렉트된 결과값을 맵의 형태로 리턴된다 : 맵에 담겨있어야지 JSON응답이 간편하다-->
		select num,name,addr  		<!-- Key값은 대문자로 전달되어 사용된다 -->
		from member
		order by num asc
	</select>
	
	<select id="memberGetList" resultType="java.util.HashMap"><!-- 셀렉트된 결과값을 맵의 형태로 리턴된다 : 맵에 담겨있어야지 JSON응답이 간편하다-->
		select num,name 			<!-- Key값은 대문자로 전달되어 사용된다 -->
		from member
		order by num asc
	</select>
	
					<!-- parameterType은 하나의 값만! 바인딩 할수있다. 여러개의 값을 바인딩 하고 싶다면 dto에 담아서 바인딩을 하면된다. -->
					<!-- jsp에서 ${}의 역할 = xml에서#{}와 같다 -->
	<delete id="delete" parameterType="int">
		delete from member
		where num=#{num}
	</delete>
	
	
	<insert id="insert" parameterType="memberDto">
		insert into member
		(num,name,addr)			<!-- 마이바티스에서 #{}은 dto.getName()을 알아서 리턴해줘서 name 자리에  넣어준다 -->
		values(member_seq.nextval,#{name},#{addr})
	</insert>
	
	<!-- 칼럼이 어러개라면 result type은 dto를 사용해서 받아주어야하지만  
		 칼럼이 여러개가 아니라면 result type은 int또는 string 으로 지정할수 있다. -->
	<select id="getData" parameterType="int" resultType="memberDto">
		select num,name,addr
		from member
		where num=#{num}
	</select>
	
	
	<update id="update" parameterType="memberDto">
		update member 
		set name=#{name},addr=#{addr}
		where num=#{num}
	</update>
</mapper>